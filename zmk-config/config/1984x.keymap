/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

#define DEFAULT 0
#define NUM     1
#define NAV     2
#define APP     3
#define SYSTEM  4

&caps_word {
  continue-list = <UNDERSCORE MINUS BACKSPACE DELETE>;
};

&mt {
  quick-tap-ms = <200>;
};

#define str(x) #x

#define SPACE_NUM(num) \
  space_num_##num: space_num_##num { \
    compatible = "zmk,behavior-macro"; \
    \#binding-cells = <0>; \
    bindings = <&macro_tap &kp SPACE &kp N##num>; \
  };

#define TMUX_NUM(num) \
  tmux_num_##num: tmux_num_##num { \
    compatible = "zmk,behavior-macro"; \
    \#binding-cells = <0>; \
    bindings = <&macro_press &kp LCTRL> \
             , <&macro_tap &kp S> \
             , <&macro_release &kp LCTRL> \
             , <&macro_tap &kp N##num>; \
  };

/ {
  macros {
    SPACE_NUM(0)
    SPACE_NUM(1)
    SPACE_NUM(2)
    SPACE_NUM(3)
    SPACE_NUM(4)
    SPACE_NUM(5)
    SPACE_NUM(6)
    SPACE_NUM(7)
    SPACE_NUM(8)
    SPACE_NUM(9)

    TMUX_NUM(0)
    TMUX_NUM(1)
    TMUX_NUM(2)
    TMUX_NUM(3)
    TMUX_NUM(4)
    TMUX_NUM(5)
    TMUX_NUM(6)
    TMUX_NUM(7)
    TMUX_NUM(8)
    TMUX_NUM(9)
  };

  conditional_layers {
    compatible = "zmk,conditional-layers";
    tri_layer {
      if-layers = <NUM NAV>;
      then-layer = <APP>;
    };
  };

  behaviors {
    lalt_gresc: grave_escape {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&mt LALT ESC>, <&kp GRAVE>;
      mods = <(MOD_LGUI)>;
      keep-mods = <(MOD_LGUI)>;
    };

    vol_up: vol_up {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp C_VOL_UP>, <&kp C_BRI_UP>;
      mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT|MOD_LALT|MOD_RALT)>;
    };

    vol_dn: vol_dn {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp C_VOL_DN>, <&kp C_BRI_DN>;
      mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT|MOD_LALT|MOD_RALT)>;
    };

    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <250>;
      quick-tap-ms = <200>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };

    sftent: sftent {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <150>;
      quick-tap-ms = <75>;
      flavor = "hold-preferred";
      bindings = <&kp>, <&kp>;
    };

    hmt: homerow_mods_no_quicktap {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <200>;
      quick-tap-ms = <75>;
      require-prior-idle-ms = <50>;
      flavor = "hold-preferred";
      bindings = <&kp>, <&kp>;
    };

    lhp: layer_hold_prefered {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      tapping-term-ms = <150>;
      flavor = "hold-preferred";
      bindings = <&mo>, <&kp>;
    };

    nav_caps: nav_caps {
      compatible = "zmk,behavior-tap-dance";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&mo NAV>, <&caps_word>, <&kp CAPS>;
    };
  };

  /*combos {
    compatible = "zmk,combos";

    #define COMBO(NAME, BINDINGS, KEYPOS, LAYERS) \
      combo_##NAME { \
        bindings = <BINDINGS>; \
        key-positions = <KEYPOS>; \
        layers = <LAYERS>; \
      };

    //  ╭──────────────────────────╮          ╭──────────────────────────╮
    //  │   0   1   2   3   4   5  │          │  6   7   8   9   10  11  │
    //  │  12  13  14  15  16  17  │          │     18  19  20   21  22  │
    //  │  23  24  25  26  27  28  │          │ 29  30  31  32   33  34  │
    //  │  35  36  37  38  39  40  │          │ 41  42  43  44   45  46  │
    //  ╰──────────────────────────╯          ╰──────────────────────────╯

    // COMBO(caps_word, &caps_word, 30 33, DEFAULT)
  };*/

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
   &kp Q            &kp W            &kp F            &kp P            &kp B              &kp J            &kp L            &kp U            &kp Y            &kp E           &kp Y            &kp E
   &kp A            &kp R            &kp S            &kp T            &kp G              &kp M            &kp N            &kp E            &kp I            &kp O           &kp K            &kp H 
   &kp S            &kp T            &kp C            &kp D            &kp V              &kp K            &kp H            &kp G            &kp M            &kp N           &kp N            &kp E
   &kp A            &kp R            &kp F            &kp P            &kp G              &kp M            &kp Q            &kp W            &kp F            &kp P           &kp B            &kp P  
      >;
    };
  };
};
